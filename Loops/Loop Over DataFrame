Loop over DataFrame 

Iterating over a Pandas DataFrame is typically done with the iterrows() method. 
Used in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available:

for lab, row in brics.iterrows() :
    ...
    
Example_1:

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Iterate over rows of cars
for lab,row in cars.iterrows():
    print(lab)
    print(row)
    
    US
cars_per_cap              809
country         United States
drives_right             True
Name: US, dtype: object
AUS
cars_per_cap          731
country         Australia
drives_right        False
Name: AUS, dtype: object
JAP
cars_per_cap      588
country         Japan
drives_right    False
Name: JAP, dtype: object
IN
cars_per_cap       18
country         India
drives_right    False
Name: IN, dtype: object
RU
cars_per_cap       200
country         Russia
drives_right      True
Name: RU, dtype: object
MOR
cars_per_cap         70
country         Morocco
drives_right       True
Name: MOR, dtype: object
EG
cars_per_cap       45
country         Egypt
drives_right     True
Name: EG, dtype: object

<script.py> output:
    US
    cars_per_cap              809
    country         United States
    drives_right             True
    Name: US, dtype: object
    AUS
    cars_per_cap          731
    country         Australia
    drives_right        False
    Name: AUS, dtype: object
    JAP
    cars_per_cap      588
    country         Japan
    drives_right    False
    Name: JAP, dtype: object
    IN
    cars_per_cap       18
    country         India
    drives_right    False
    Name: IN, dtype: object
    RU
    cars_per_cap       200
    country         Russia
    drives_right      True
    Name: RU, dtype: object
    MOR
    cars_per_cap         70
    country         Morocco
    drives_right       True
    Name: MOR, dtype: object
    EG
    cars_per_cap       45
    country         Egypt
    drives_right     True
    Name: EG, dtype: object
-------------------------------------------------------------------------------------------------------------------------------------------

The row data that's generated by iterrows() on every run is a Pandas Series. 
This format is not very convenient to print out. Luckily, you can easily select variables from the Pandas Series using square brackets:

for lab, row in brics.iterrows() :
    print(row['country'])
    
    
Example_2:
Adapt the code in the for loop such that the first iteration prints out "US: 809", 
the second iteration "AUS: 731", and so on. The output should be in the form "country: cars_per_cap". 
Make sure to print out this exact string, with the correct spacing.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Adapt for loop
for lab, row in cars.iterrows() :
    print(lab + ": " + str(row['cars_per_cap']))


<script.py> output:
    United States: 809
    Australia: 731
    Japan: 588
    India: 18
    Russia: 200
    Morocco: 70
    Egypt: 45
    
-------------------------------------------------------------------------------------------------------------------------------------------    
Add column 

In the video, Filip showed you how to add the length of the country names of the brics DataFrame in a new column:

for lab, row in brics.iterrows() :
    brics.loc[lab, "name_length"] = len(row["country"])
    
Example_3:

Use a for loop to add a new column, named COUNTRY, 
that contains a uppercase version of the country names in the "country" column. You can use the string method upper() for this.
To see if your code worked, print out cars. Don't indent this code, so that it's not part of the for loop.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Code for loop that adds COUNTRY column
for lab, row in cars.iterrows() :
    cars.loc[lab, "COUNTRY"] = row["country"].upper()
    
# Print cars
print(cars)

     cars_per_cap        country drives_right        COUNTRY
US            809  United States         True  UNITED STATES
AUS           731      Australia        False      AUSTRALIA
JAP           588          Japan        False          JAPAN
IN             18          India        False          INDIA
RU            200         Russia         True         RUSSIA
MOR            70        Morocco         True        MOROCCO
EG             45          Egypt         True          EGYPT


Using iterrows() to iterate over every observation of a Pandas DataFrame is easy to understand, 
but not very efficient. On every iteration, you're creating a new Pandas Series.

If you want to add a column to a DataFrame by calling a function on another column, 
the iterrows() method in combination with a for loop is not the preferred way to go. Instead, you'll want to use apply().

Compare the iterrows() version with the apply() version to get the same result in the brics DataFrame:

for lab, row in brics.iterrows() :
    brics.loc[lab, "name_length"] = len(row["country"])

brics["name_length"] = brics["country"].apply(len)

Example_4:

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Use .apply(str.upper)
for lab, row in cars.iterrows() :
    cars.loc[lab, "COUNTRY"] = row["country"].upper()
cars["COUNTRY"]=cars["country"].apply(str.upper)

     cars_per_cap        country drives_right        COUNTRY
US            809  United States         True  UNITED STATES
AUS           731      Australia        False      AUSTRALIA
JAP           588          Japan        False          JAPAN
IN             18          India        False          INDIA
RU            200         Russia         True         RUSSIA
MOR            70        Morocco         True        MOROCCO
EG             45          Egypt         True          EGYPT

print(cars)

    
